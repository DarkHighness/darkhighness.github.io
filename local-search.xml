<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于博客写作</title>
    <link href="/2023/03/20/about-blog/"/>
    <url>/2023/03/20/about-blog/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么想写博客？"><a href="#为什么想写博客？" class="headerlink" title="为什么想写博客？"></a>为什么想写博客？</h2><p>最开始就是虚荣心作祟，圈子里的大佬又强，博客又好看，我也想整一个。 不过那时候博客首选应该还是 WordPress，像 Jekyll， Hexo，Ghost 这种静态生成工具，都是后面的事情了。</p><h2 id="为什么不写博客？"><a href="#为什么不写博客？" class="headerlink" title="为什么不写博客？"></a>为什么不写博客？</h2><p>如果你很 “不幸” 的看过我之前的博客，你会注意到我的博客包括：<code>“Java 的反射为什么慢？你为什么应该使用 MethodHandle”</code>，<code>“什么是 Product 积，什么是 Coproduct 余积”</code>，<code>“用 Coq 证明一个选择排序是正确的”</code> 的一些关于 Java 或者是函数式的技术分享到 <code>“今天又发生了什么什么”</code>，<code>“今天又和谁一起玩了什么游戏”</code> 之内的日常琐事。 </p><p>高质量的产出是十分困难的，更何况是一个 **<del>“菜菜的我”</del>**。 我的博客更多的是分享自己的学习记录，笔记之类的东西，但如今繁多的知识库软件如：<a href="https://obsidian.md/">Obsidian</a>， <a href="https://logseq.com/">LogSeq</a>，<a href="https://www.notion.so/zh-cn">Notion</a>。 再加上他们各具特色 Markdown 方言，去维护一个博客，迁移到生成器支持的标准 Markdown 语法，再去修改和美化格式，属实说不上有什么动力。 再者就是老生常谈的图片资源，也要去做压缩和管理 <del>恐怖的首屏加载时间</del>，比如图床 sm.ms。 </p><div class="note note-info">            <p>顺带一提，其实 Github 也有很多 Bot 可以做一些自动化操作，比如说 ImgBot 可以自动的为仓库中的图片进行压缩，并发起 Pull Request，正如在本博客中的仓库所看到的。</p>          </div><p>简单来说，写博客和维护博客都不是一件容易的事情。**<del>所以我的博客一年一换主题，但是内容几年都不一定一更</del>**</p><h2 id="为什么选择-Hexo"><a href="#为什么选择-Hexo" class="headerlink" title="为什么选择 Hexo?"></a>为什么选择 Hexo?</h2><ol><li>Hexo 的文档详尽，配置也趋于简单；</li><li>Hexo 的插件生态丰富，可以完成很多定制化的操作，如：<code>hexo-generator-search</code>，<code>hexo-generator-index</code> 等；</li><li>相同类型的 Markdown 静态网页生成器其实有很多选择，但功能上大体相同的，不存在专属特性，或者杀手级插件；</li></ol><h2 id="为什么不选择-Wordpress-或者其他动态博客工具？"><a href="#为什么不选择-Wordpress-或者其他动态博客工具？" class="headerlink" title="为什么不选择 Wordpress 或者其他动态博客工具？"></a>为什么不选择 Wordpress 或者其他动态博客工具？</h2><p>简单来说: <strong>看需求</strong><br>复杂来说:</p><ol><li>我嫖 Github Pages 不就是为了省钱吗.jpg，还要个后端服务器不由得花钱 💰？</li><li>我的博客又不会有多少人👀，为什么要折腾得那么麻烦?</li></ol><h2 id="为什么选择-Fluid-主题？"><a href="#为什么选择-Fluid-主题？" class="headerlink" title="为什么选择 Fluid 主题？"></a>为什么选择 Fluid 主题？</h2><ol><li>主题外观足够简洁，满足自己的审美需要；</li><li>主题的功能已经完美覆盖了自己的需求：本地搜索，懒加载，Latex 公式支持，Mermaid 流程图，Tag 支持，代码块支持，评论支持；</li><li>默认的页面支持已经包括了日常所需的：<code>首页</code>，<code>归档</code>，<code>分类</code>，<code>标签</code>，<code>关于</code> 和 <code>友链</code> 几种常见的页面需求；</li><li>支持 Latex 编写，Mermaid 流程图等附加的 Markdown 功能；</li><li>支持多种评论插件，如来比力，Gitalk 等；</li><li>支持 Tag 插件，非常不错的 “引用” 替代品，例如:</li></ol><div class="note note-info">            <p><strong>关于主题和字体选择</strong><br><a href="https://www.programmingfonts.org/">Programming Fonts</a> 这个网站的字体都试过了，Nerd Font 支持的也试过了， Windows 下 MacType 也装了，可是终究是不满意字体的显示效果。 Ide 的主题从 Material Design 到 OneDark，到 GruvBox 到 … 也试过了，可是频频还是觉得看不顺眼，以至于要摸鱼换主题。</p>          </div><div class="note note-danger">            <p><strong>1080P 是 125%, 2K 也是 125% 的人</strong><br>不能理解现在为什么还有网页和应用的响应式布局这么烂.jpg</p>          </div> ]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Higher Kind Type</title>
    <link href="/2023/01/25/higher-kind-type/"/>
    <url>/2023/01/25/higher-kind-type/</url>
    
    <content type="html"><![CDATA[<p>随手写着玩的 HKT</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">HKT</span> &#123;  <br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Inner</span>;  <br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">With</span>&lt;T&gt;: HKT&lt;Inner = T&gt;;  <br>&#125;  <br>  <br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">Functor</span>: HKT &#123;  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fmap</span>&lt;T, F&gt;(&amp;<span class="hljs-keyword">self</span>, f: F) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;T&gt;  <br>    <span class="hljs-keyword">where</span>  <br>        F: <span class="hljs-title function_ invoke__">Fn</span>(&amp;<span class="hljs-keyword">Self</span>::Inner) <span class="hljs-punctuation">-&gt;</span> T;  <br>&#125;  <br>  <br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">Applicative</span> : Functor &#123;  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">pure</span>(a: <span class="hljs-keyword">Self</span>::Inner) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>;  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">ap</span>&lt;I, O&gt;(&amp;<span class="hljs-keyword">self</span>, i: <span class="hljs-keyword">Self</span>::With&lt;I&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;O&gt;  <br>        <span class="hljs-keyword">where</span>  <br>            <span class="hljs-keyword">Self</span>::Inner: <span class="hljs-title function_ invoke__">Fn</span>(&amp;I) <span class="hljs-punctuation">-&gt;</span> O;  <br>&#125;  <br>  <br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">Monad</span>: Applicative &#123;  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">bind</span>&lt;O, F&gt;(&amp;<span class="hljs-keyword">self</span>, f: F) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;O&gt;  <br>    <span class="hljs-keyword">where</span>  <br>        F: <span class="hljs-title function_ invoke__">Fn</span>(&amp;<span class="hljs-keyword">Self</span>::Inner) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;O&gt;;  <br>&#125;  <br>  <br><span class="hljs-keyword">impl</span>&lt;T&gt; HKT <span class="hljs-keyword">for</span> <span class="hljs-title class_">Option</span>&lt;T&gt; &#123;  <br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Inner</span> = T;  <br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">With</span>&lt;U&gt; = <span class="hljs-type">Option</span>&lt;U&gt;;  <br>&#125;  <br>  <br><span class="hljs-keyword">impl</span>&lt;T&gt; Functor <span class="hljs-keyword">for</span> <span class="hljs-title class_">Option</span>&lt;T&gt; &#123;  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fmap</span>&lt;U, F&gt;(&amp;<span class="hljs-keyword">self</span>, f: F) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;U&gt;  <br>    <span class="hljs-keyword">where</span>  <br>        F: <span class="hljs-title function_ invoke__">Fn</span>(&amp;<span class="hljs-keyword">Self</span>::Inner) <span class="hljs-punctuation">-&gt;</span> U,  <br>    &#123;  <br>        <span class="hljs-keyword">match</span> <span class="hljs-keyword">self</span> &#123;  <br>            <span class="hljs-title function_ invoke__">Some</span>(x) =&gt; <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-title function_ invoke__">f</span>(x)),  <br>            <span class="hljs-literal">None</span> =&gt; <span class="hljs-literal">None</span>,  <br>        &#125;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">impl</span>&lt;T&gt; Applicative <span class="hljs-keyword">for</span> <span class="hljs-title class_">Option</span>&lt;T&gt; &#123;  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">pure</span>(a: <span class="hljs-keyword">Self</span>::Inner) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;  <br>        <span class="hljs-title function_ invoke__">Some</span>(a)  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">ap</span>&lt;I, O&gt;(&amp;<span class="hljs-keyword">self</span>, i: <span class="hljs-keyword">Self</span>::With&lt;I&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;O&gt;  <br>    <span class="hljs-keyword">where</span>  <br>        <span class="hljs-keyword">Self</span>::Inner: <span class="hljs-title function_ invoke__">Fn</span>(&amp;I) <span class="hljs-punctuation">-&gt;</span> O,  <br>    &#123;  <br>        <span class="hljs-keyword">match</span> <span class="hljs-keyword">self</span> &#123;  <br>            <span class="hljs-title function_ invoke__">Some</span>(f) =&gt; <span class="hljs-keyword">match</span> i &#123;  <br>                <span class="hljs-title function_ invoke__">Some</span>(x) =&gt; <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-title function_ invoke__">f</span>(&amp;x)),  <br>                <span class="hljs-literal">None</span> =&gt; <span class="hljs-literal">None</span>,  <br>            &#125;  <br>            <span class="hljs-literal">None</span> =&gt; <span class="hljs-literal">None</span>,  <br>        &#125;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">impl</span>&lt;T&gt; Monad <span class="hljs-keyword">for</span> <span class="hljs-title class_">Option</span>&lt;T&gt; &#123;  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">bind</span>&lt;U, F&gt;(&amp;<span class="hljs-keyword">self</span>, f: F) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;U&gt;  <br>    <span class="hljs-keyword">where</span>  <br>        F: <span class="hljs-title function_ invoke__">Fn</span>(&amp;<span class="hljs-keyword">Self</span>::Inner) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;U&gt;,  <br>    &#123;  <br>        <span class="hljs-keyword">match</span> <span class="hljs-keyword">self</span> &#123;  <br>            <span class="hljs-title function_ invoke__">Some</span>(x) =&gt; <span class="hljs-title function_ invoke__">f</span>(&amp;x),  <br>            <span class="hljs-literal">None</span> =&gt; <span class="hljs-literal">None</span>,  <br>        &#125;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">impl</span>&lt;T&gt; HKT <span class="hljs-keyword">for</span> <span class="hljs-title class_">Vec</span>&lt;T&gt; &#123;  <br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Inner</span> = T;  <br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">With</span>&lt;U&gt; = <span class="hljs-type">Vec</span>&lt;U&gt;;  <br>&#125;  <br>  <br><span class="hljs-keyword">impl</span>&lt;T&gt; Functor <span class="hljs-keyword">for</span> <span class="hljs-title class_">Vec</span>&lt;T&gt; &#123;  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fmap</span>&lt;U, F&gt;(&amp;<span class="hljs-keyword">self</span>, f: F) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;U&gt;  <br>    <span class="hljs-keyword">where</span>  <br>        F: <span class="hljs-title function_ invoke__">Fn</span>(&amp;<span class="hljs-keyword">Self</span>::Inner) <span class="hljs-punctuation">-&gt;</span> U,  <br>    &#123;  <br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();  <br>  <br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">x</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span> &#123;  <br>            v.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-title function_ invoke__">f</span>(x));  <br>        &#125;  <br>  <br>        v  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">impl</span>&lt;T&gt; Applicative <span class="hljs-keyword">for</span> <span class="hljs-title class_">Vec</span>&lt;T&gt; &#123;  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">pure</span>(a: <span class="hljs-keyword">Self</span>::Inner) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;  <br>        <span class="hljs-built_in">vec!</span>[a]  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">ap</span>&lt;I, O&gt;(&amp;<span class="hljs-keyword">self</span>, i: <span class="hljs-keyword">Self</span>::With&lt;I&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;O&gt;  <br>    <span class="hljs-keyword">where</span>  <br>        <span class="hljs-keyword">Self</span>::Inner: <span class="hljs-title function_ invoke__">Fn</span>(&amp;I) <span class="hljs-punctuation">-&gt;</span> O,  <br>    &#123;  <br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();  <br>  <br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">f</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span> &#123;  <br>            <span class="hljs-keyword">for</span> <span class="hljs-variable">x</span> <span class="hljs-keyword">in</span> &amp;i &#123;  <br>                v.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-title function_ invoke__">f</span>(x));  <br>            &#125;  <br>        &#125;  <br>  <br>        v  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">impl</span>&lt;T&gt; Monad <span class="hljs-keyword">for</span> <span class="hljs-title class_">Vec</span>&lt;T&gt; &#123;  <br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">bind</span>&lt;U, F&gt;(&amp;<span class="hljs-keyword">self</span>, f: F) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;U&gt;  <br>    <span class="hljs-keyword">where</span>  <br>        F: <span class="hljs-title function_ invoke__">Fn</span>(&amp;<span class="hljs-keyword">Self</span>::Inner) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::With&lt;U&gt;,  <br>    &#123;  <br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();  <br>  <br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">x</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span> &#123;  <br>            v.<span class="hljs-title function_ invoke__">extend</span>(<span class="hljs-title function_ invoke__">f</span>(x));  <br>        &#125;  <br>  <br>        v  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2023</tag>
      
      <tag>Rust</tag>
      
      <tag>函数式编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些有趣的句子</title>
    <link href="/2023/01/24/interesting-sentences/"/>
    <url>/2023/01/24/interesting-sentences/</url>
    
    <content type="html"><![CDATA[<blockquote><p>We say that a language is compiled if the translator analyzes it thoroughly (rather than effecting some “mechanical” transformation), and if the intermediate program does not bear a strong resemblance to the source. These two characteristics—thorough analysis and nontrivial transformation—are the hallmarks of compilation.  </p><p>如果翻译器对程序进行了彻底的分析而非某种机械的变换，而且生成的中间程序与源程序之间已经没有很强的相似性，我们就认为这个语言是编译的。彻底的分析和非平凡的变换，是编译方式的标志性特征.  </p><p>We say that a knowledge point is comprehended if you analyze it thoroughly (rather than echoing what the books say), and if the concept generated in your brain does not bear a strong resemblance to the text. These two characteristics—thorough analysis and nontrivial transformation—are the hallmarks of comprehension.</p><p>如果你对知识进行了彻底的分析而非某种机械的套弄，在你脑中生成的概念与生硬的文字之间已经没有很强的相似性，我们就认为这个概念是被理解的。彻底的分析和非凡的变换，是获得真知的标志性特征.</p><p>来自: <a href="https://ice1000.org/#:~:text=We%20say%20that,hallmarks%20of%20comprehension.">Ice1000’s blog</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>2033</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 新春快乐</title>
    <link href="/2023/01/21/happy-new-year-2023/"/>
    <url>/2023/01/21/happy-new-year-2023/</url>
    
    <content type="html"><![CDATA[<p>2023 新春快乐，愿兔年万事顺遂。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
